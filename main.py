from PyQt6.QtWidgets import QApplication, QMainWindow, QToolBar, QLineEdit, QPushButton, QSizePolicy
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtWebEngineCore import QWebEngineProfile, QWebEnginePage
from PyQt6.QtCore import QUrl, Qt
from PyQt6.QtNetwork import QNetworkCookie, QNetworkProxy
from PyQt6.QtWebEngineCore import QWebEngineUrlRequestInterceptor, QWebEngineUrlRequestInfo
from PyQt6.QtCore import QUrl
from http.cookies import SimpleCookie
import json
import urllib.parse
import sys
import os
import subprocess
import platform
import base64
import time


class AutoTraderInstaller:
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
        if getattr(sys, 'frozen', False):
            # –ó–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π exe/pyinstaller
            self.executable_path = sys.executable
        else:
            # –ó–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ Python —Å–∫—Ä–∏–ø—Ç
            self.executable_path = f'python3 "{os.path.abspath(sys.argv[0])}"' if platform.system() != 'Windows' else f'python "{os.path.abspath(sys.argv[0])}"'
        
        self.app_name = "AutoTrader"
        self.scheme = "autotrader"
        
    def is_frozen(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        return getattr(sys, 'frozen', False)
    
    def get_executable_command(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_frozen():
            # –î–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            return f'"{sys.executable}"' if ' ' in sys.executable else sys.executable
        else:
            # –î–ª—è Python —Å–∫—Ä–∏–ø—Ç–∞
            python_cmd = 'python' if platform.system() == 'Windows' else 'python3'
            return f'{python_cmd} {os.path.abspath(sys.argv[0])}'

class LinuxInstaller(AutoTraderInstaller):
    def __init__(self):
        super().__init__()
        self.desktop_dir = os.path.expanduser('~/.local/share/applications')
        self.desktop_file = os.path.join(self.desktop_dir, f'{self.scheme}.desktop')
    
    def create_desktop_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ .desktop —Ñ–∞–π–ª–∞ –¥–ª—è Linux"""
        desktop_content = f"""[Desktop Entry]
Name={self.app_name}
Exec={self.get_executable_command()} %u
Icon=web-browser
Terminal=false
Type=Application
MimeType=x-scheme-handler/{self.scheme};
StartupNotify=true
Categories=Network;WebBrowser;
"""
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(self.desktop_dir, exist_ok=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º .desktop —Ñ–∞–π–ª
        with open(self.desktop_file, 'w') as f:
            f.write(desktop_content)
        
        # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(self.desktop_file, 0o755)
        
        return self.desktop_file
    
    def register_scheme_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ URL-—Å—Ö–µ–º—ã"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º MIME —Ç–∏–ø
            subprocess.run(['xdg-mime', 'default', f'{self.scheme}.desktop', f'x-scheme-handler/{self.scheme}'], 
                          check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError:
            return False
    
    def update_desktop_database(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö desktop —Ñ–∞–π–ª–æ–≤"""
        try:
            subprocess.run(['update-desktop-database', self.desktop_dir], 
                          check=True, capture_output=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            # update-desktop-database –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    def install(self):
        """–ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è Linux"""
        try:
            desktop_file = self.create_desktop_file()
            self.register_scheme_handler()
            self.update_desktop_database()
            
            print(f"‚úÖ URL scheme handler installed for Linux!")
            print(f"üìÅ Desktop file: {desktop_file}")
            return True
        except Exception as e:
            print(f"‚ùå Failed to install on Linux: {e}")
            return False


class WindowsInstaller(AutoTraderInstaller):
    def __init__(self):
        super().__init__()
        import winreg
        self.winreg = winreg
    
    def register_url_scheme(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è URL-—Å—Ö–µ–º—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows"""
        try:
            # –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É –¥–ª—è URL-—Å—Ö–µ–º
            key_path = f"Software\\Classes\\{self.scheme}"
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
            with self.winreg.CreateKey(self.winreg.HKEY_CURRENT_USER, key_path) as key:
                self.winreg.SetValue(key, "", self.winreg.REG_SZ, f"URL:{self.app_name} Protocol")
                self.winreg.SetValueEx(key, "URL Protocol", 0, self.winreg.REG_SZ, "")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            command_path = key_path + "\\shell\\open\\command"
            with self.winreg.CreateKey(self.winreg.HKEY_CURRENT_USER, command_path) as key:
                command = f'"{self.get_executable_command()}" "%1"'
                self.winreg.SetValue(key, "", self.winreg.REG_SZ, command)
                
            return True
        except Exception as e:
            print(f"Registry error: {e}")
            return False
    
    def install(self):
        """–ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è Windows"""
        try:
            if self.register_url_scheme():
                print(f"‚úÖ URL scheme handler installed for Windows!")
                print(f"üîß Command: {self.get_executable_command()} \"%1\"")
                return True
            else:
                print("‚ùå Failed to register URL scheme in Windows registry")
                return False
        except Exception as e:
            print(f"‚ùå Failed to install on Windows: {e}")
            return False


class CustomUserAgentInterceptor(QWebEngineUrlRequestInterceptor):
    def __init__(self, user_agent, parent=None):
        super().__init__(parent)
        self.user_agent = user_agent

    def interceptRequest(self, info):
        info.setHttpHeader(b"User-Agent", self.user_agent.encode())
        

class AutoTraderApp(QMainWindow):
    USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36"
    #USER_AGENT = "Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/6.9.1 Chrome/130.0.0.0 Safari/537.36"
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AutoTrader")
        self.setGeometry(100, 100, 800, 600)
        # --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
        self.toolbar = QToolBar()
        self.toolbar.setMovable(False) # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å
        self.addToolBar(self.toolbar)

        # --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ URL ---
        self.url_bar = QLineEdit()
        self.url_bar.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ URL –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        self.toolbar.addWidget(self.url_bar)

        # --- –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫ ---
        self.toolbar.addSeparator() # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

        btn_steam_inv = QPushButton("Steam (–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å)")
        btn_steam_inv.clicked.connect(lambda: self.load_bookmark_url("https://steamcommunity.com/my/inventory/"))
        self.toolbar.addWidget(btn_steam_inv)

        btn_steam_market = QPushButton("Steam (–¢–ü)")
        btn_steam_market.clicked.connect(lambda: self.load_bookmark_url("https://steamcommunity.com/market/"))
        self.toolbar.addWidget(btn_steam_market)

        btn_tm = QPushButton("TM")
        btn_tm.clicked.connect(lambda: self.load_bookmark_url("https://market.csgo.com/"))
        self.toolbar.addWidget(btn_tm)

        btn_buff = QPushButton("Buff")
        btn_buff.clicked.connect(lambda: self.load_bookmark_url("https://buff.163.com/"))
        self.toolbar.addWidget(btn_buff)

        # --- –í–µ–±-–±—Ä–∞—É–∑–µ—Ä ---
        self.profile = QWebEngineProfile.defaultProfile()
        self.interceptor = CustomUserAgentInterceptor(self.USER_AGENT, self)
        self.profile.setUrlRequestInterceptor(self.interceptor)
        self.profile.setHttpUserAgent(self.USER_AGENT)
        self.browser = QWebEngineView(self.profile)
        self.cookie_store = self.profile.cookieStore()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –±–∞—Ä –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        self.browser.urlChanged.connect(self.update_url_bar)

        self.setCentralWidget(self.browser)

        self.cookies = None
        self.proxy = None
        self.host = None
        self.target_url = None
        
    def update_url_bar(self, qurl: QUrl):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ URL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.url_bar.setText(qurl.toString())
        self.url_bar.setCursorPosition(0) # –°—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ

    def navigate_to_url(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –∞–¥—Ä–µ—Å—É –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        url = self.url_bar.text()
        if url:
            # –ï—Å–ª–∏ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ö–µ–º—ã, –¥–æ–±–∞–≤–ª—è–µ–º https://
            if not url.startswith(("http://", "https://")):
                url = "https://" + url
            self.browser.load(QUrl(url))

    def load_bookmark_url(self, url: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π URL –∏–∑ –∑–∞–∫–ª–∞–¥–∫–∏"""
        self.browser.load(QUrl(url))
        # URL –±–∞—Ä –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–∞–º —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª urlChanged
        
    def parse_custom_url(self, url):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ URL"""
        if not url.startswith('autotrader://'):
            return url, None
            
        try:
            parsed = urllib.parse.urlparse(url)
            query_params = urllib.parse.parse_qs(parsed.query)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏
            cookies = query_params.get('cookies', [None])[0]
            if cookies:
                cookies = json.loads(cookies)

            proxy = query_params.get('proxy', [None])[0]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π URL
            target_url = f"https://{parsed.netloc}{parsed.path}"
            target_url = target_url.replace("https://https://", "https://")
            return target_url, parsed.hostname, cookies, proxy
        except Exception as e:
            raise e
            print(f"Error parsing URL: {e}")
            return 'https://market.csgo.com', None
    
    def set_cookies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        sc = SimpleCookie()
        for key, data in self.cookies.items():
            domain, value = data["domain"], data["value"]
            value = value.replace(" ", "+")
            #if "csgo.com" in domain or "dota2.net" in domain:
            #    continue
            sc[key] = base64.b64decode(value.encode()).decode()

            if domain.count(".") > 1:
                domain = "." + domain.split(".", 1)[1]
                
            sameSite = None
            if key == "d2mid":
                sameSite = "Lax"
            sc[key]['samesite'] = None
            sc[key]['secure'] = not bool(sameSite)
            sc[key]['httponly'] = True
            sc[key]['domain'] = domain

        contents = sc.output().encode('ascii')
        contents = contents.replace(b"Set-Cookie: ", b"")
        self.cookie_store.deleteAllCookies()
        for qt_cookie in QNetworkCookie.parseCookies(contents):
            self.cookie_store.setCookie(qt_cookie)#, QUrl(self.target_url))

    def set_proxy(self):
        scheme, addr = self.proxy.split("://")
        auth, addr = addr.split("@")
        user, password = auth.split(":")
        host, port = addr.split(":")

        proxy = QNetworkProxy()
        proxy.setType(QNetworkProxy.ProxyType.HttpProxy)
        proxy.setHostName(host)
        proxy.setPort(int(port))
        proxy.setUser(user)
        proxy.setPassword(password)

        QNetworkProxy.setApplicationProxy(proxy)
        
    
    def start_app(self, initial_url=None):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if initial_url and initial_url.startswith('autotrader://'):
            self.target_url, self.host, self.cookies, self.proxy = self.parse_custom_url(initial_url)
        else:
            self.target_url = 'https://market.csgo.com'
            self.cookies = None
            self.host = None

        self.set_cookies()
        #self.target_url = "http://127.0.0.1:8000"
        self.set_proxy()
        self.browser.load(QUrl(self.target_url))

        
def get_installer():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç–∞–ª–ª–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
    system = platform.system().lower()
    if system == 'linux':
        return LinuxInstaller()
    elif system == 'windows':
        return WindowsInstaller()
    else:
        raise NotImplementedError(f"Installation not supported for {system}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    chromium_args = [
        f'--user-agent={AutoTraderApp.USER_AGENT}',
        '--disable-blink-features=AutomationControlled',
        '--no-sandbox',
        '--disable-dev-shm-usage',
        '--disable-features=WebRtcHideLocalIpsWithMdns'  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
    ]
    if len(sys.argv) > 1:
        for argv in sys.argv:
            if argv.startswith('autotrader://'):
                # –ó–∞–ø—É—Å–∫ —Å URL-—Å—Ö–µ–º–æ–π
                app = QApplication(["AutoTraderApp"] + chromium_args)
                window = AutoTraderApp()
                window.start_app(argv)
                window.show()
                app.exec()
                return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ URL-—Å—Ö–µ–º—ã
    try:
        installer = get_installer()
        if installer.install():
            print("üéâ Installation completed successfully!")
        else:
            print("‚ö†Ô∏è  Installation completed with warnings.")
        return
    except Exception as e:
        print(f"‚ùå Installation failed: {e}")
        return

if __name__ == '__main__':
    main()
